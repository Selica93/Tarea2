# Tarea2
# 1 Buscar en Kaggle y descargar el dataset de auto-mpg.csv
# 2    Importar los datos en Python
# 3      Describir al menos dos variables cuantitativas (Media + desviación típica + histograma)

# -->mpg (eficiencia de cada coche, medida en  miles per galon)
# --> horsepower (potencia)
# 4     Describir el origen de los coches en el dataset (1: Estados Unidos, 2: Europa, 3, Japón) con el estadístico y el gráfico que consideréis adecuado.

------------------------------------------------------------------------------------------------------------------------
import os
import pandas as pd  
import numpy as np
import matplotlib.pyplot as plt #esto es para hacer graficos

os.getcwd()

os.chdir('/Users/sergiolillocarbonell/Desktop/EDEM/Python')
os.getcwd()

# vemos que al abrir el CSV las variables están separadas por comas y valores decimales con puntos 
# con replace arreglamos los datos a nuestra manera
# para cambiar el nombre de las columnas utilizamos:
# ejemplo --> x= x.rename(columns={'mpg': 'eficiencia'})

# Reading CSV and analyzing the entire document

auto_features = pd.read_csv("auto-mpg.csv", sep=",", decimal=".")


auto_features.shape
auto_features.tail()
auto_features.head()

auto_features.describe()
auto_features.dtypes

# changed data at origin columns

auto_features.origin = auto_features.origin.replace({1:'EEUU', 2:'Europa', 3:'Japon'})


# changed value 0 for the mean (105) and '?' for 0 at the horsepower column

auto_features.horsepower = pd.to_numeric(auto_features.horsepower)
auto_features.horsepower = auto_features.horsepower.replace({0:105}) 
auto_features.horsepower = auto_features.horsepower.replace({'?':0})
auto_features.horsepower.describe()

# QC OK


# FIRST PART ------------------ MPG CARS HISTOGRAM ---------------------------

# MPG analysis and histogram

mpg= auto_features.loc[:,'mpg']

print(mpg.describe())

mpg.shape
mpg.tail()
mpg.head()

#QC OK

# Naming data

m=mpg.mean()
sd=mpg.std()
sample=mpg.count()
x=mpg

# MPG Histogram

plt.hist(x, bins=30, edgecolor='black') 
plt.xticks(np.arange(5,50, step=10))

plt.xlabel('Cars efficiency')
plt.ylabel('Frecuency')
plt.title(r'Figure 1.0 - Mileage per gallon performances ' '\n' 'of various cars')
plt.grid(axis='both', alpha=1)

# Add MEAN and SD box "down right"

props = dict(boxstyle = 'round', facecolor = 'white', lw = 0.5)
textstr = '$\mathrm{Mean}=%.1f$\n$\mathrm{S.D.}=%.0f$'%(m, sd)
plt.text (38, 15, textstr, bbox = props)

# Add SAMPLE box "upper left"

props = dict(boxstyle = 'round', facecolor = 'white', lw = 0.5)
textstr ='$\mathrm{n}=%.0f$'%(sample)
plt.text (6, 35, textstr, bbox = props)

# Add reference lines and store their names in label for later legend

plt.axvline(x=m, linewidth = 1, linestyle = 'solid', color = "red", label = 'Mean')

plt.axvline(x=m-sd, linewidth=1, linestyle= 'dashed', color="black", label='- 1 S.D.')

plt.axvline(x=m+sd, linewidth=1, linestyle= 'dashed', color="green", label='+ 1 S.D.')

plt. legend(loc='upper left', bbox_to_anchor=(0.73, 0.98))

# save histogram

plt.savefig('bar_centro.jpg')



# SECOND PART ------------------------ HP CAR HISTOGRAM ---------------

hp= auto_features.loc[:,'horsepower']

print (hp.describe())

hp.shape
hp.head()
hp.tail()
hp.dtypes

# QC OK

#naming data

x=hp
m= hp.mean()
sd= hp.std()
sample= hp.count()

# HP histogram

plt.hist(x, bins=30, edgecolor='black')
plt.xticks(np.arange(40,230, step=30))

plt.xlabel('Horse Power')
plt.ylabel('Frecuency')

plt.title(r'Figure 1.2 - Horse Power Performance ' '\n' 'of various cars')
plt.grid(axis='both', alpha=1)

# Add MEAN and SD box "down right"

props = dict(boxstyle = 'round', facecolor = 'white', lw = 0.5)
textstr = '$\mathrm{Mean}=%.1f$\n$\mathrm{S.D.}=%.0f$'%(m, sd)
plt.text (190, 15, textstr, bbox = props)


# Add SAMPLE box "upper left"

props = dict(boxstyle = 'round', facecolor = 'white', lw = 0.5)
textstr ='$\mathrm{n}=%.0f$'%(sample)
plt.text (130, 40, textstr, bbox = props)

# Add reference lines and store their names in label for later legend

plt.axvline(x=m, linewidth = 1, linestyle = 'solid', color = "red", label = 'Mean')

plt.axvline(x=m-sd, linewidth=1, linestyle= 'dashed', color="black", label='- 1 S.D.')

plt.axvline(x=m+sd, linewidth=1, linestyle= 'dashed', color="green", label='+ 1 S.D.')

plt. legend(loc='upper left', bbox_to_anchor=(0.73, 0.98))

# save histogram

plt.savefig('horsepower.jpg')


# 3rd part ---------- DESCRIBING A NOMINAL VARIABLE (Origin of Cars)  -----------------------

# Create a dataframe with the table of frequencies

mytable= pd.crosstab(index=auto_features["origin"], columns="count")

# Getting sample size 

n=mytable.sum()

# Getting %

mytable= (mytable/n)*100
print(mytable)

#Creating Barchart
plt.bar(mytable.index, mytable['count'])
objects = ('EEUU', 'EUROPE', 'JAPAN')
plt.xticks(mytable.index, objects)
plt.ylabel("Percentage")

plt.title('Figure 1.3 Origin Country of Cars')

# insert Legend with sample size
props = dict(boxstyle='round', facecolor='white', lw=0.5)
textstr = '$\mathrm{n}=%.0f$'%(n)
plt.text (3,60, textstr , bbox=props)

plt.savefig('Origin.jpg')
